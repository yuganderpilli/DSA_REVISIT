STL library:
#include<bits/stdc++.h>

Algorithms
Containers
Functions
Iterators 

pair<int,int>p = {1,3}

cout<<p.first<<p.second;


pair <int,pair<int,int>>p={1,{2,3}}  // nested pair 
cout<<p.first<<p.second.first<<p.second.second;


pair<int,int> arr[]= [{1,2},{2,3}];



### vectors  (dynamic array )


vector<int> v 
v.push_back(2)
v.emplace_back(2)


vector<pair<int,int>> vec;

vec.push_back({1,2})
vec.emplace_back(1,2)

vector<int> v(5,100); 5 instances of 100

vector<int> v2(v1);


v.end() -> points to memory after last element in the vector 


for(auto it:v){
    cout<<it<<" "  // to print elements in the vector
}

v.erase(v.begin()+1)
v.erase(v.begin()+1, v.begin()+2) // remove starting 2 elements 

v.insert(v.begin()+1,32) // inserts at second position
v.pop_back()

v.clear()

v.empty() tells if the vector is empty


list // simillar to vector  but gives you forward operations 



list <int> ls;

ls.push_back()
ls.emplace_back()

ls.push_front()

ls.emplace_front()


// dequeue 

dequeue<int> dq;

simillar to list  // vector 

dq.front()
dq.back();



rest functions are same as list and vector.


Stack // lifo (last in first out)


stack <int> st;

st.push()
st.emplace()
st.pop()
st.top()

st.size()
st.empty()



Queue Data structure // fifo (first in first out )

queue<int> q;


q.push()
q.emplace()
q.back() // prints last element 

q.front()
q.pop()



// priprity queue 
element has largest value stays at the top  ( first) // data is no stored in linear fashion 


// set data structure

stores everything in sorted order and unquie

set<int> st;

st.insert()

st.emplace()

st.find(4) if element not present it return st.end()

st.erase(3)

st.count(1) 

erase(st.start(), st.end())



//// multiset ( can contain duplicates but stored in sorted manner)

//// unordered_set set<int> st;\


/// map<int, int> mpp // key value pair ; keys should be unique  and stored in sorted order

mpp.emplace({1,2});
mpp.insert({1,2});
mpp.find() // returns and iterator


\\\multi_map() can store duplicted key // works in constant time 

map runs in log time;


sort(a,a+n)

sort(a,a+n, greator<int>) // sorts in the decending order 

greator<int>  is an comparator 


int count = __built_in_popcount(6) // retuns how many set bits are there 

next_permutation(s.begin(),s.end())